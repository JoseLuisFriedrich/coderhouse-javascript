Object.freeze(obj) // Object.seal(obj)
Object.keys(obj) // Object.values(obj) // Object.entries(obj)


jift("first element in array")
array.shift() removes the first element in array
deleteditems = array.splice(2,3) remove 3 elements starting at 2nd position
.slice() get but do nt remove
.includes() -> si existe en item
array.some((p) => {return p.color === 'color'}}) -> condicion
for(let p in obj) console.log(p   obj[p])-> iterar propiedades

document.querySelector('#id p')
document.querySelector('.id')
document.querySelectorAll('.id')
.parentElement
.childNodes -> trae espacios
.children

const node = document.createElement('p')
node.textContent = ''
divPadre.appendChild(node, parent)
.insertBefore














--------------------------------------------------------------------------------------------------------


const dragEnter = event => {
  event.currentTarget.classList.add('drop');
}

const dragLeave = event => {
  event.currentTarget.classList.remove('drop');
}


// getAll('.secondaryContainer').forEach(secondaryContainer => {
//   secondaryContainer.addEventListener('dragenter', dragEnter);
//   secondaryContainer.addEventListener('dragleave', dragLeave);
// })



  // event.dataTransfer.setData('text/plain', event.currentTarget.dataset.id);
  //document.querySelector(`[data-id="${event.dataTransfer.getData('text/plain')}"]`).remove();


// const dragStart = target => {
//   target.classList.add('dragging');
// }

// const dragEnd = event => {
//   event.currentTarget.classList.remove('dragging');
// }


getAll('.component').forEach(component => {
  component.addEventListener('dragend', dragEnd);
})


      // childs: [
      //   {
      //     tag: 'h2', text: this.name,
      //     attributes: { 'oninput': `handleChange('${this.id}', 'name', this)`, 'value': `${name}` },
      //     style: 'width: 100%'
      //   }
      // ]


    // `
    // <article id="${id}" class="component" draggable="true" ondragstart="drag(event)" data-id="header">
    //   <input type="text" style="width: 100%" oninput="handleChange('${id}', 'name', this)" value="${name}">
    // </article>
    // `

    
// String to Element
// const element = element => {
//   dummy = document.createElement('template')
//   dummy.innerHTML = element.trim()
//   return dummy.content.childNodes[0]
// }
